{"version":3,"file":"recReadChunksInRange.js","sourceRoot":"","sources":["../src/recReadChunksInRange.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAC9C,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,uDAAuD;AACvD,MAAM,aAAa,GAAG,CAAC,CAAC;AAExB,MAAM,UAAU,oBAAoB,CAClC,MAAM,EACN,gBAAgB,EAChB,cAAc,EACd,KAAK;IAEL,MAAM,KAAK,GAAG;QACZ,MAAM;QACN,aAAa,EAAE,gBAAgB;KAChC,CAAC;IAEF,4CAA4C;IAC5C,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAEvB,IAAI,sBAAsB,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACrE,KAAK,CAAC,aAAa,IAAI,aAAa,CAAC;IAErC,IAAI,sBAAsB,GAAG,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACrE,KAAK,CAAC,aAAa,IAAI,aAAa,CAAC;IAErC,IAAI,gBAAgB,GAAG,gBAAgB,CAAC;IACxC,IAAI,kBAAkB,GAAG,KAAK,CAAC,aAAa,CAAC;IAC7C,IAAI,iBAAiB,GAAG,sBAAsB,CAAC;IAC/C,IAAI,sBAAsB,GAAG,sBAAsB,CAAC;IACpD,IAAI,kBAAkB,GACpB,KAAK,CAAC,aAAa,GAAG,sBAAsB,GAAG,sBAAsB,CAAC;IAExE,IAAI,iBAAiB,IAAI,CAAC,IAAI,sBAAsB,IAAI,CAAC,EAAE,CAAC;QAC1D,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACrD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,iBAAiB,IAAI,EAAE,EAAE,CAAC;QAC5B,IAAI,YAAY,GAAG,YAAY,CAC7B,KAAK,EACL,EAAE,EACF,kBAAkB,EAClB,kBAAkB,CACnB,CAAC;QACF,MAAM,CACJ,KAAK,CAAC,aAAa,KAAK,kBAAkB,EAC1C,GAAG,EAAE,oBAAoB,KAAK,CAAC,aAAa,IAAI,kBAAkB,EAAE,CACrE,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC;YACf,KAAK,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC;QAC3B,CAAC;aAAM,IAAI,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;YAC1C,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;QACxC,CAAC;aAAM,IAAI,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;YACzC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,eAAe;IACf,IAAI,sBAAsB,GAAG,CAAC,EAAE,CAAC;QAC/B,OAAO,oBAAoB,CACzB,MAAM,EACN,kBAAkB,GAAG,iBAAiB,EACtC,cAAc,EACd,EAAE,CACH,CAAC;IACJ,CAAC;IAED,qBAAqB;IACrB,IAAI,kBAAkB,IAAI,cAAc,EAAE,CAAC;QACzC,OAAO,oBAAoB,CACzB,MAAM,EACN,kBAAkB,EAClB,cAAc,EACd,KAAK,CACN,CAAC;IACJ,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { readId } from \"./readId\";\n\nimport { getChunkData } from \"./getChunkData\";\nimport { assert } from \"./assert\";\n// const debug = require('debug')('parse-magica-voxel')\nconst intByteLength = 4;\n\nexport function recReadChunksInRange(\n  Buffer,\n  bufferStartIndex,\n  bufferEndIndex,\n  accum\n) {\n  const state = {\n    Buffer,\n    readByteIndex: bufferStartIndex,\n  };\n\n  // var id = readId(state, bufferStartIndex);\n  var id = readId(state);\n\n  var chunkContentByteLength = Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += intByteLength;\n\n  var childContentByteLength = Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += intByteLength;\n\n  var bufferStartIndex = bufferStartIndex;\n  var definitionEndIndex = state.readByteIndex;\n  var contentByteLength = chunkContentByteLength;\n  var childContentByteLength = childContentByteLength;\n  var totalChunkEndIndex =\n    state.readByteIndex + chunkContentByteLength + childContentByteLength;\n\n  if (contentByteLength == 0 && childContentByteLength == 0) {\n    console.warn(`no content or children for ${id}`, id);\n    return accum;\n  }\n\n  if (contentByteLength && id) {\n    var chunkContent = getChunkData(\n      state,\n      id,\n      definitionEndIndex,\n      totalChunkEndIndex\n    );\n    assert(\n      state.readByteIndex === totalChunkEndIndex,\n      `${id} length mismatch ${state.readByteIndex}:${totalChunkEndIndex}`\n    );\n    if (!accum[id]) {\n      accum[id] = chunkContent;\n    } else if (accum[id] && !accum[id].length) {\n      accum[id] = [accum[id], chunkContent];\n    } else if (accum[id] && accum[id].length) {\n      accum[id].push(chunkContent);\n    }\n  }\n\n  //read children\n  if (childContentByteLength > 0) {\n    return recReadChunksInRange(\n      Buffer,\n      definitionEndIndex + contentByteLength,\n      bufferEndIndex,\n      {}\n    );\n  }\n\n  //accumulate siblings\n  if (totalChunkEndIndex != bufferEndIndex) {\n    return recReadChunksInRange(\n      Buffer,\n      totalChunkEndIndex,\n      bufferEndIndex,\n      accum\n    );\n  }\n\n  return accum;\n}\n"]}
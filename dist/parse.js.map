{"version":3,"file":"parse.js","sourceRoot":"","sources":["../src/parse.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAG9D,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC,MAAM,aAAa,GAAG,CAAC,CAAC;AAExB,MAAM,UAAU,KAAK,CAAC,KAAe;IACnC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAElC,IAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IACjC,IAAI,IAAI,GAAG,oBAAoB,CAC7B,MAAM,EACN,CAAC,EAAE,kEAAkE;IACrE,MAAM,CAAC,UAAU,EACjB,MAAM,CACP,CAAC;IAEF,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,iBAAiB,EAAE,CAAC;IAClC,CAAC;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAE3C,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import parseHeader from \"./parseHeader\";\nimport useDefaultPalette from \"./useDefaultPalette\";\nimport { recReadChunksInRange } from \"./recReadChunksInRange\";\nimport { ByteLike } from \"./ByteLike\";\n\nimport { Buffer } from \"buffer\";\nimport { VoxData } from \"./VoxData\";\nconst intByteLength = 4;\n\nexport function parse(bytes: ByteLike): VoxData {\n  const buffer = Buffer.from(bytes);\n\n  var header = parseHeader(buffer);\n  var body = recReadChunksInRange(\n    buffer,\n    8, //start on the 8th byte as the header dosen't follow RIFF pattern.\n    buffer.byteLength,\n    header\n  );\n\n  if (!body.RGBA) {\n    body.RGBA = useDefaultPalette();\n  }\n\n  const result = Object.assign(header, body);\n\n  return result;\n}\n"]}
{"version":3,"file":"SIZE.js","sourceRoot":"","sources":["../../src/chunkHandlers/SIZE.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,WAAW,CAAA;AAEhC,MAAM,UAAU,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ;IACrD,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC1D,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC1D,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC1D,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,MAAM,CAAC,KAAK,CAAC,aAAa,KAAK,QAAQ,EAAE,gCAAgC,CAAC,CAAC;IAE3E,OAAO;QACL,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;QACR,CAAC,EAAE,KAAK;KACT,CAAC;AACJ,CAAC;AAAA,CAAC","sourcesContent":["import {assert} from '../assert'\n\nexport function SIZEHandler(state, startIndex, endIndex){\n  var sizex = state.Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += 4;\n\n  var sizey = state.Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += 4;\n\n  var sizez = state.Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += 4;\n\n  assert(state.readByteIndex === endIndex, \"Chunk handler didn't reach end\");\n\n  return {\n    x: sizex,\n    y: sizey,\n    z: sizez\n  };\n};\n"]}
{"version":3,"file":"nTRN.js","sourceRoot":"","sources":["../../src/chunkHandlers/nTRN.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC,kCAAkC;AAClC,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAEnC,MAAM,UAAU,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ;IACrD,IAAI,GAAG,GAAG,EAAE,CAAC;IAEb,UAAU;IACV,GAAG,CAAC,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC5D,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,uBAAuB;IACvB,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjC,gBAAgB;IAChB,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC7D,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,cAAc;IACd,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAChE,MAAM,CAAC,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,EAAE,wBAAwB,CAAC,CAAC;IACzD,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,WAAW;IACX,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC7D,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,gBAAgB;IAChB,GAAG,CAAC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAClE,MAAM,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,EAAE,sBAAsB,CAAC,CAAC;IACvD,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,GAAG,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3C,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CACJ,KAAK,CAAC,aAAa,KAAK,QAAQ,EAChC,+BAA+B,KAAK,CAAC,aAAa,IAAI,QAAQ,EAAE,CACjE,CAAC;IAEF,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["var readDict = require(\"../readDict\");\n// var assert = require('assert');\nimport { assert } from \"../assert\";\n\nexport function nTRNHandler(state, startIndex, endIndex) {\n  var ret = {};\n\n  // node id\n  ret.node_id = state.Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += 4;\n\n  // DICT node attributes\n  ret.attributes = readDict(state);\n  // child node id\n  ret.child_id = state.Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += 4;\n\n  // reserved id\n  ret.reserved_id = state.Buffer.readInt32LE(state.readByteIndex);\n  assert(ret.reserved_id === -1, \"reserved id must be -1\");\n  state.readByteIndex += 4;\n\n  // layer id\n  ret.layer_id = state.Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += 4;\n\n  // num of frames\n  ret.num_of_frames = state.Buffer.readInt32LE(state.readByteIndex);\n  assert(ret.num_of_frames >= 1, \"num frames must be 1\");\n  state.readByteIndex += 4;\n\n  ret.frame_transforms = [];\n  for (var i = 0; i < ret.num_of_frames; i++) {\n    ret.frame_transforms.push(readDict(state));\n  }\n\n  assert(\n    state.readByteIndex === endIndex,\n    `nTRN chunk length mismatch: ${state.readByteIndex} ${endIndex}`\n  );\n\n  return ret;\n}\n"]}
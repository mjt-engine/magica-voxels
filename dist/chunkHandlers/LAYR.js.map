{"version":3,"file":"LAYR.js","sourceRoot":"","sources":["../../src/chunkHandlers/LAYR.js"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,aAAa,CAAC;AAEnC,OAAO,EAAC,MAAM,EAAC,MAAM,WAAW,CAAA;AAEhC,MAAM,UAAU,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ;IACrD,IAAI,GAAG,GAAG,EAAE,CAAC;IAEb,UAAU;IACV,GAAG,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACvD,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,uBAAuB;IACvB,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEjC,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAChE,MAAM,CAAC,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,EAAE,6BAA6B,CAAC,CAAC;IAC9D,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import readDict from '../readDict';\n\nimport {assert} from '../assert'\n\nexport function LAYRHandler(state, startIndex, endIndex){\n  var ret = {};\n\n  // node id\n  ret.id = state.Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += 4;\n\n  // DICT node attributes\n  ret.attributes = readDict(state);\n\n  ret.reserved_id = state.Buffer.readInt32LE(state.readByteIndex);\n  assert(ret.reserved_id === -1, 'LAYR reserved_id must be -1');\n  state.readByteIndex += 4;\n\n  return ret;\n}\n\n\n"]}
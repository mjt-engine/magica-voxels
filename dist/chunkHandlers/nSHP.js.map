{"version":3,"file":"nSHP.js","sourceRoot":"","sources":["../../src/chunkHandlers/nSHP.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC,OAAO,EAAC,MAAM,EAAC,MAAM,WAAW,CAAA;AAEhC,MAAM,UAAW,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ;IACtD,IAAI,GAAG,GAAG,EAAE,CAAC;IAEb,UAAU;IACV,GAAG,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACvD,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,uBAAuB;IACvB,GAAG,CAAC,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEjC,GAAG,CAAC,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAClE,MAAM,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,EAAE,8BAA8B,CAAC,CAAA;IAC9D,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;IAEzB,GAAG,CAAC,MAAM,GAAG,EAAE,CAAC;IAChB,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,GAAG,CAAC,aAAa,EAAE,CAAC,EAAE,EAAC,CAAC;QACrC,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,KAAK,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACzD,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC;QAEzB,4DAA4D;QAC5D,qGAAqG;QACrG,qBAAqB;QACrB,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEnC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,aAAa,KAAK,QAAQ,EAAE,+BAA+B,KAAK,CAAC,aAAa,IAAI,QAAQ,EAAE,CAAC,CAAC;IAC3G,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["var readDict = require('../readDict');\nimport {assert} from '../assert'\n\nexport  function nSHPHandler(state, startIndex, endIndex){\n  var ret = {};\n\n  // node id\n  ret.id = state.Buffer.readInt32LE(state.readByteIndex);\n  state.readByteIndex += 4;\n\n  // DICT node attributes\n  ret.attributes = readDict(state);\n\n  ret.num_of_models = state.Buffer.readInt32LE(state.readByteIndex);\n  assert(ret.num_of_models >= 1, \"nSHP num of models must be 1\")\n  state.readByteIndex += 4;\n\n  ret.models = [];\n  for(var i=0; i<ret.num_of_models; i++){\n    const model = {};\n    model.id = state.Buffer.readInt32LE(state.readByteIndex);\n    state.readByteIndex += 4;\n\n    // supposed to be a DICT here but marked as reserved in docs\n    // https://github.com/ephtracy/voxel-model/blob/master/MagicaVoxel-file-format-vox-extension.txt#L103\n    // might not be valid\n    model.attributes = readDict(state);\n\n    ret.models.push(model);\n  }\n\n  assert(state.readByteIndex === endIndex, `nSHP chunk length mismatch: ${state.readByteIndex} ${endIndex}`);\n  return ret;\n}\n"]}